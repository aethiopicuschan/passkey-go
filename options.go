package passkey

import (
	"encoding/json"
	"errors"
)

// PublicKeyCredentialCreationOptions represents the options required for creating a new public key credential.
type PublicKeyCredentialCreationOptions struct {
	Challenge              string                          `json:"challenge"`                        // A unique, random challenge generated by the server.
	RP                     RelyingPartyEntity              `json:"rp"`                               // Information about the relying party (server).
	User                   UserEntity                      `json:"user"`                             // Information about the user creating the credential.
	PubKeyCredParams       []PublicKeyCredentialParameters `json:"pubKeyCredParams"`                 // List of supported public key credential parameters.
	Timeout                int                             `json:"timeout,omitempty"`                // Optional timeout in milliseconds for the credential creation.
	Attestation            string                          `json:"attestation,omitempty"`            // Attestation preference ("none", "indirect", "direct").
	AuthenticatorSelection AuthenticatorSelection          `json:"authenticatorSelection,omitempty"` // Preferences for selecting an authenticator.
}

// RelyingPartyEntity describes the relying party (typically the server).
type RelyingPartyEntity struct {
	Name string `json:"name"` // Human-readable name of the relying party.
	ID   string `json:"id"`   // Relying party identifier (usually the domain).
}

// UserEntity describes the user who is registering the credential.
type UserEntity struct {
	ID          string `json:"id"`          // User identifier, base64url encoded.
	Name        string `json:"name"`        // User handle, typically the username.
	DisplayName string `json:"displayName"` // User's display name.
}

// PublicKeyCredentialParameters defines acceptable algorithms for public key credentials.
type PublicKeyCredentialParameters struct {
	Type string `json:"type"` // Credential type, typically "public-key".
	Alg  int    `json:"alg"`  // Cryptographic algorithm identifier (-7: ES256, -257: RS256).
}

// AuthenticatorSelection specifies authenticator requirements for registration.
type AuthenticatorSelection struct {
	UserVerification string `json:"userVerification"`      // Requirement level for user verification ("required", "preferred", or "discouraged").
	ResidentKey      string `json:"residentKey,omitempty"` // Optional: whether a resident key is required ("required", "preferred", or omitted).
}

// CreateOptions constructs and serializes the credential creation options into JSON.
// These options are then sent to the client browser for initiating passkey registration.
func CreateOptions(rpID, rpName, userID, userName, displayName, challenge string) ([]byte, error) {
	opts := PublicKeyCredentialCreationOptions{
		Challenge: challenge,
		RP:        RelyingPartyEntity{Name: rpName, ID: rpID},
		User:      UserEntity{ID: userID, Name: userName, DisplayName: displayName},
		PubKeyCredParams: []PublicKeyCredentialParameters{
			{Type: "public-key", Alg: -7},   // ES256 algorithm
			{Type: "public-key", Alg: -257}, // RS256 algorithm
		},
		Attestation: "none", // No attestation is required
		AuthenticatorSelection: AuthenticatorSelection{
			UserVerification: "preferred", // User verification is preferred but not required
		},
	}

	// Serialize the credential creation options to JSON
	b, err := json.Marshal(opts)
	if err != nil {
		return nil, errors.Join(ErrCreateOptionsMarshal, err) // Combine and return serialization errors
	}
	return b, nil
}
